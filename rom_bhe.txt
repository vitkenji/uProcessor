
    constant ROM_content : mem := (
        0   => LD & R3 & "0000000000", -- LD R3, 0
        1   => LD & R4 & "0000000000", -- LD R4, 0
        -- C: SOMA R3 COM R4 E GUARDA EM R4
        2   => MOV_ACC & R4 & "0000000000", -- MOV A, R4
        3   => ADD & R3 & "0000000000", -- ADD R3
        4   => MOV_REG & R4 & "0000000000", -- MOV R4, A
        -- D: SOMA 1 EM R3
        5   => MOV_ACC & R3 & "0000000000", -- MOV A, R3
        6   => LD & R0 & "0000000001", -- LD R0, 1
        7   => ADD & R0 & "0000000000", -- ADD R0
        8   => MOV_REG & R3 & "0000000000", -- MOV R3, A

        -- E: SE R3 FOR MENOR OU IGUAL A 30, VAI PARA 2
        9   => LD & R1 & "0000011110", -- LD R1, 30
        10  => MOV_ACC & R3 & "0000000000", -- MOV A, R3
        11  => CMP & R1 & "0000000000", -- CMP R1 
        12  => BLE & "110110" & "0000000", -- Se menor ou igual, volta 10 instruções (para o passo C)
        13  => MOV_ACC & R4 & "0000000000", -- MOV A, R4
        14  => MOV_REG & R5 & "0000000000", -- MOV R5, A
        15  => "00000000000000000",
        16  => "00000000000000000",
        17  => "00000000000000000",
        18  => "00000000000000000",
        19  => "00000000000000000",
        20  => "00000000000000000", 
        21  => "00000000000000000", 
        22  => "00000000000000000", 
        23  => "00000000000000000",
        24  => "00000000000000000",
        25  => "00000000000000000",
        26  => "00000000000000000",
        27  => "00000000000000000",
        28  => "00000000000000000",
        29  => "00000000000000000",
        30  => "00000000000000000",
        others => (others =>'0')
    );
